
package co.za.carrental.domain; // package: organizes domain entities under project namespace

import jakarta.persistence.Entity; // JPA annotation to mark this class as a persistent entity
import jakarta.persistence.Table; // JPA annotation to optionally set the DB table name
import jakarta.persistence.Id; // JPA annotation to mark the primary key field
import jakarta.persistence.Column; // JPA annotation to configure column properties
import jakarta.persistence.GenerationType; // enum for ID generation strategies (not used here; factory will set IDs)
import java.util.Objects; // Utility for equals/hashCode implementations

@Entity // Tells JPA/Hibernate to map this class to a database table
@Table(name = "admin_login") // Specifies the table name to use (useful for clarity and DB naming)
public class AdminLogin { // Domain entity class for representing admin login accounts

    @Id // Marks the field below as the primary key for the table
    @Column(name = "admin_id", nullable = false, updatable = false) // Column config: name, non-null, not updatable
    private String adminId; // Primary key (String) — generated by factory (UUID) before saving to DB

    @Column(name = "username", nullable = false, unique = true, length = 100) // Unique username column
    private String username; // Admin’s username used for login (unique constraint recommended)

    @Column(name = "email", nullable = false, unique = true, length = 150) // Unique email column
    private String email; // Admin’s email address (unique) — useful for password recovery/login

    @Column(name = "password_hash", nullable = false, length = 255) // Store hashed passwords, not plaintext
    private String passwordHash; // Hashed password — DO NOT store plain text; hash in service/factory

    @Column(name = "role", nullable = false, length = 50) // Role column (e.g., SUPER_ADMIN, ADMIN)
    private String role; // Role string used for simple authorization checks in the portal

    // Default constructor required by JPA for entity instantiation via reflection
    protected AdminLogin() { // Protected to avoid accidental direct usage while allowing JPA access
    }

    // Convenience constructor used by factories or tests to create instances easily
    public AdminLogin(String adminId,
                      String username,
                      String email,
                      String passwordHash,
                      String role) { // Constructor argument order: id, username, email, passwordHash, role
        this.adminId = adminId; // Assign supplied adminId (factory typically supplies UUID)
        this.username = username; // Assign username
        this.email = email; // Assign email
        this.passwordHash = passwordHash; // Assign hashed password
        this.role = role; // Assign role
    }

    // Getter for adminId (primary key)
    public String getAdminId() {
        return adminId; // Return the admin's ID
    }

    // Setter for adminId (rarely used; present for completeness and certain frameworks)
    public void setAdminId(String adminId) {
        this.adminId = adminId; // Set the admin ID (factory normally sets this before persist)
    }

    // Getter for username
    public String getUsername() {
        return username; // Return username
    }

    // Setter for username
    public void setUsername(String username) {
        this.username = username; // Update username
    }

    // Getter for email
    public String getEmail() {
        return email; // Return email
    }

    // Setter for email
    public void setEmail(String email) {
        this.email = email; // Update email
    }

    // Getter for passwordHash
    public String getPasswordHash() {
        return passwordHash; // Return stored password hash
    }

    // Setter for passwordHash
    public void setPasswordHash(String passwordHash) {
        this.passwordHash = passwordHash; // Update the stored hash (hash before calling this)
    }

    // Getter for role
    public String getRole() {
        return role; // Return role
    }

    // Setter for role
    public void setRole(String role) {
        this.role = role; // Update role
    }

    // Override equals to compare entities by primary key (adminId)
    @Override
    public boolean equals(Object o) {
        if (this == o) return true; // If same reference, equal
        if (o == null || getClass() != o.getClass()) return false; // Null or different class -> not equal
        AdminLogin that = (AdminLogin) o; // Cast to AdminLogin for comparison
        return Objects.equals(adminId, that.adminId); // Compare by adminId (PK)
    }

    // Override hashCode to match equals (based on adminId)
    @Override
    public int hashCode() {
        return Objects.hash(adminId); // Hash based on adminId
    }

    // Custom toString excluding sensitive fields like passwordHash
    @Override
    public String toString() {
        return "AdminLogin{" +
                "adminId='" + adminId + '\'' + // Include id
                ", username='" + username + '\'' + // Include username
                ", email='" + email + '\'' + // Include email
                ", role='" + role + '\'' + // Include role
                '}'; // Do NOT include passwordHash for security reasons
    }
}
